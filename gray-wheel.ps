%!PS-Adobe-3.0
%%BoundingBox: 0 0 400 400
% (Adapt the bounding box to your needs)
% (cc-BY-SA) H.Zeller <h.zeller@acm.org>
% Little program to create a gray encoder wheel.

% Allow to use various measrurement formats.
/mm { 72 25.4 div mul } bind def
/inch { 72 mul } bind def

/print-title true def     % Should we print a title on the page
/print-mm true def        % print measurements in mm or inch ?

% By default, we're making a gray encoded wheel, but with make-gray-band
% set to true, this makes a gray encoded band
/make-gray-band false def

% The parameters for the gray code and output wheel or band.
/bits 6 def               % to encode 2^n values

% in case make-gray-band false
/outer-radius 30 mm def   % Where the inner segment starts.

% in case make-gray-band true, this is the length of the band
/band-length 130 mm def

% The width and gap of the encoder bars
/strip-width 1.8 mm def
/strip-gap 0.2 mm def     % gap between bars

%-- usually, nothing needs to be changed beyond this line ..

/steps 1 bits bitshift def
/strip-step strip-width strip-gap add def
/inner-radius outer-radius strip-step bits mul sub def

/fontsize 10 def
/free-around 5 mm def    % free space around the wheel (measurement free zone)
/title-offset inner-radius strip-step bits mul add fontsize 2 mul add free-around add def

/cross-tick 2 mm def   % the length of a tick for measure-lines

/TAU 3.14159265897 2 mul def

/Helvetica findfont fontsize scalefont setfont
0 setlinewidth
200 200 translate   % centered on our page

% Print the n strings on the stack
% params: string string ... n
/show-n {
  -1 1 {
    -1 roll
    print-title { show } { pop } ifelse
  } for
} bind def

% print the n strings on the stack centered around the current x pos
% params: string string ... n
/show-n-centered {
    1 1 2 index {
	index
	stringwidth pop 2 div neg 0 rmoveto
    } for
    show-n
} bind def

% returns some strings that format the given value (in point) in mm or inch
% depending onthe global /print-mm setting.
% This function returns multiple strings
% params: number-in-point
% out: string ... number-of-strings
/measurement-string {
    72 div % in inch
    print-mm {
        25.4 mul                                  % convert to mm
	1000 mul round 1000 div (       ) cvs (mm)  % ... print it with 1/100
    }
    {
      1000 mul round 1000 div (       ) cvs (in)  % print inch with 1/1000
    } ifelse
    2
} bind def


% Title of this graphics
0 title-offset moveto
steps (     ) cvs
( steps)
( \(better than )
make-gray-band {
    band-length steps div
    2 div   % Sampling accuracy 1/2 LSB
    measurement-string
    ( pick-up accuracy needed\))
} {
    inner-radius TAU mul steps div
    2 div   % Sampling accuracy 1/2 LSB
    measurement-string
    ( pick-up accuracy on inner segment needed\))
} ifelse

2 -1 roll  % get number of measurement-string strings
4 add      % add our own strings
show-n-centered

0 title-offset fontsize sub moveto
strip-step measurement-string ( strip step) 2 -1 roll 1 add show-n-centered

make-gray-band {
    -200 0 translate
} {
    % Center cross
    0 0 moveto cross-tick 2 div neg 0 rlineto cross-tick 0 rlineto
    0 0 moveto 0 cross-tick 2 div neg rlineto 0 cross-tick rlineto
    stroke
} ifelse

% Show a strip of an arc
% start-fraction arc-fraction inner-radius width
/arc-strip {
    4 dict begin
    /width exch def
    /inner-radius exch def
    /angle exch 360 mul def
    /start-angle exch 360 mul def
    gsave
    start-angle rotate
    inner-radius 0 moveto inner-radius width add 0 lineto
    0 0 inner-radius width add 0 angle arc
    0 0 inner-radius  angle 0 arcn
    fill
    grestore
    end
} def

% start-fraction len-fraction offset width
/band-strip {
    4 dict begin
    /width exch def
    /offset exch def
    /len-fraction exch band-length mul def
    /start-fraction exch band-length mul def
    gsave
    start-fraction offset moveto
    start-fraction len-fraction add offset lineto
    0 width rlineto
    start-fraction offset width add lineto
    closepath
    fill
    grestore
    end
} def

% convert value on stack to gray-code n ^ (n >> 1)
/to-gray {
    dup
    -1 bitshift xor
} def

/segment-width 1 steps 0.25 sub div def % slightly oversize to solidly join

%-- now, the actual meat
0 1 steps 1 sub {
    /number exch def
    /start-arc number steps div def  % in this step we start arc here

    /g number to-gray def
    /current-mask 1 bits 1 sub bitshift def
    /offset 0 def
    0 1 bits {
	pop
	g current-mask and 0 eq not {
	    make-gray-band {
		start-arc segment-width offset strip-width band-strip
	    } {
		start-arc segment-width offset inner-radius add strip-width arc-strip
	    } ifelse

	} if
	/current-mask current-mask -1 bitshift def
	/offset offset strip-step add def
    } for
} for

showpage
